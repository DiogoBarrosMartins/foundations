generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ChatMessage {
  id        String   @id @default(cuid())
  playerId  String?
  username  String
  channel   String
  text      String
  createdAt DateTime @default(now())
}

enum RaceName {
  HUMAN
  ORC
  ELF
  DWARF
  UNDEAD
}

enum TileType {
  VILLAGE
  OUTPOST
  EMPTY
  SHRINE
}

model Player {
  id        String    @id @default(uuid())
  username  String    @unique
  password  String
email     String?   @unique(map: "unique_player_email")

race RaceName @default(HUMAN)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  villages  Village[]
}

model Outpost {
  id        String   @id @default(uuid())
race RaceName @default(HUMAN)

  name      String
  type      String
  x         Int
  y         Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tileId    String?   @unique
  tile      Tile?     @relation("OutpostTile", fields: [tileId], references: [id])
}

model Village {
  id        String   @id @default(uuid())
  name      String
  playerId  String
  playerName String?
  player    Player   @relation(fields: [playerId], references: [id])
  x         Int
  y         Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  resolvedAt      DateTime? 
  resourceAmounts         Json     @default("{\"food\":500,\"wood\":500,\"stone\":500,\"gold\":500}")
  resourceProductionRates Json     @default("{\"food\":10,\"wood\":10,\"stone\":10,\"gold\":8}")
  lastCollectedAt         DateTime @default(now())

race RaceName @default(HUMAN)

  combatState Json? 

  buildings     Building[]
  troops        Troop[]
  tileId        String?   @unique
  tile          Tile?     @relation("VillageTile", fields: [tileId], references: [id])
  tasks         ConstructionTask[]
  trainingTasks TrainingTask[]
  armyMovements ArmyMovement[]
}

model Tile {
  id         String   @id @default(uuid())
  x          Int
  y          Int
  type       TileType
  race       RaceName?
  name       String?
  playerId   String?
  playerName String?
  metadata   Json?

  worldId    String?
  world      World?    @relation("WorldTiles", fields: [worldId], references: [id])

  outpost    Outpost?  @relation("OutpostTile")
  village    Village?  @relation("VillageTile")

  @@unique([x, y], name: "x_y")
}

enum BuildingType {
  SAWMILL
  CLAY_PIT
  IRON_MINE
  FARM
  WAREHOUSE
  GRANARY
  MARKET
  BARRACKS
  STABLE
  WORKSHOP
  WALL
  TOWER
  SMITHY
  EMBASSY
  ACADEMY
  SHRINE
}

model Building {
  id        String       @id @default(uuid())
  villageId String
  village   Village      @relation(fields: [villageId], references: [id])
  type      BuildingType
  level     Int          @default(0)

  status      String    @default("idle")
  queuedUntil DateTime?
  name        String    @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks ConstructionTask[]
}

model ConstructionTask {
  id         String       @id @default(uuid())
  villageId  String
  buildingId String
  type       BuildingType
  level      Int
  status     String       @default("in_progress")

  startTime DateTime  @default(now())
  endTime   DateTime?

  building Building @relation(fields: [buildingId], references: [id])
  village  Village  @relation(fields: [villageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Troop {
  id        String @id @default(uuid())
  villageId String
  troopType String
  quantity  Int    @default(0)
  status    String @default("idle")

  trainingTasks TrainingTask[]
  Village       Village        @relation(fields: [villageId], references: [id])

  @@unique([villageId, troopType, status])
}

model TrainingTask {
  id           String       @id @default(uuid())
  villageId    String
  troopId      String
  troopType    String
  buildingType BuildingType
  count        Int
  remaining    Int
  status       String
  startTime    DateTime?
  endTime      DateTime?
  queueJobId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Troop   Troop   @relation(fields: [troopId], references: [id])
  Village Village @relation(fields: [villageId], references: [id])
}

model World {
  id        String   @id @default(uuid())
  name      String
  size      Int
  createdAt DateTime @default(now())

  tiles     Tile[]   @relation("WorldTiles")
}

model Battle {
  id               String   @id @default(uuid())
  attackerVillageId String
  defenderVillageId String?
  originX          Int
  originY          Int
  targetX          Int
  targetY          Int
  troops           Json
  startTime        DateTime
  arrivalTime      DateTime
  status           String
  createdAt        DateTime @default(now())
  resolvedAt       DateTime? 
  report           BattleReport?
}

model BattleReport {
  battleId         String   @id
  outcome          String
  attackerLosses   Json
  defenderLosses   Json
  loot             Json
  notes            String?
  createdAt        DateTime @default(now())

  battle           Battle   @relation(fields: [battleId], references: [id])
}

model ArmyMovement {
  id        String   @id @default(uuid())
  villageId String
  village   Village  @relation(fields: [villageId], references: [id])
  direction String
  battleId  String
  originX   Int
  originY   Int
  targetX   Int
  targetY   Int
  troops    Json
  arrivalTime DateTime
  createdAt DateTime @default(now())
}
